# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  IMAGE_NAME: connect_four_nginx
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install rust stable
        run: |
          rustup install stable
          rustup default stable
      - name: Run tests
        run: |
          cd solver
          cargo test --verbose
      - name: setup wasm-pack
        uses: jetli/wasm-pack-action@v0.3.0
      - name: setup-node
        uses: actions/setup-node@v2.1.4
      - name: build webpage
        run: |
          cd www
          npm install
          npm run build

      - name: Generate Tagged Urls
        id: image_tags
        shell: bash
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
          echo "::set-output name=sha::htrojan/connect-four:$SHORT_SHA"
      - name: Change directory
        run: cd www
      - name: Build dockerfile
        shell: bash
        working-directory: ./www
        run: docker build --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "release" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

